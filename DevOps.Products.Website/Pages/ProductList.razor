@page "/products"

@using DevOps.Products.Website.Services.Interfaces
@using DevOps.Products.Website.Services.Interfaces.Pages
@using DevOps.Products.Website.ViewModels
@inject IProductListService ProductListService

<h1>Products</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (_productListViewModel.Products == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<input type="text" @bind-value="SearchString" @bind-value:event="oninput" placeholder="Search..."/>
	<select @bind="SelectedCategoryID">
		<option></option>
		@foreach (CategoryViewModel category in _productListViewModel.Categories)
		{
			<option value="@category.ID">@category.Name</option>
		}
	</select>
	<select @bind="SelectedBrandID">
		<option></option>
		@foreach (BrandViewModel brand in _productListViewModel.Brands)
		{
			<option value="@brand.ID">@brand.Name</option>
		}
	</select>

	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Brand</th>
				<th>Category</th>
			</tr>
		</thead>
		<tbody>
			@foreach (ProductDetailsViewModel product in _productListViewModel.Products)
			{
				<tr>
					<td>@product.Name</td>
					<td>@product.Brand.Name</td>
					<td>@product.Category.Name</td>
					<td><a href="/products/@product.ID">Details</a></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private ProductListViewModel _productListViewModel;

	private string _searchString;
	private int? _selectedCategoryID;
	private int? _selectedBrandID;

	public string SearchString
	{
		get => _searchString;
		set
		{
			_searchString = value;
			FilterProducts();
		}
	}

	public int? SelectedCategoryID
	{
		get => _selectedCategoryID;
		set
		{
			_selectedCategoryID = value;
			FilterProducts();
		}
	}

	public int? SelectedBrandID
	{
		get => _selectedBrandID;
		set
		{
			_selectedBrandID = value;
			FilterProducts();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		_productListViewModel = await ProductListService.GetProductListViewModelsAsync();
	}

	private async void FilterProducts()
	{
		_productListViewModel = await ProductListService.GetProductListViewModelsAsync(SearchString, SelectedCategoryID, SelectedBrandID);

		this.StateHasChanged();
	}
}
