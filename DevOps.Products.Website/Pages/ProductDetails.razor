@page "/products/{ProductID}"

@using DevOps.Products.Website.Services.Interfaces
@using DevOps.Products.Website.Models.ViewModels
@using Microsoft.AspNetCore.Components
@inject IProductDetailsService ProductDetailsService

<h1>Products</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (_product == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Brand</th>
				<th>Category</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>@_product.Name</td>
				<td>@_product.Brand</td>
				<td>@_product.Category</td>
				<td>@_product.Description</td>
			</tr>
		</tbody>
	</table>
	@if (!_product.ReviewViewModels.Any())
	{
		<p><em>No Reviews yet!</em></p>
	}
	else
	{
		<table class="table">
			<thead>
				<tr>
					<th>Customer</th>
					<th>Text</th>
					<th>Rating</th>
				</tr>
			</thead>
			<tbody>
				@foreach (ReviewViewModel review in _product.ReviewViewModels)
				{
					<tr>
						<td>@review.CustomerName</td>
						<td>@review.Text</td>
						<td>@review.Rating</td>
					</tr>
				}
			</tbody>
		</table>
	}
	<input type="number" @bind="Rating" placeholder="Add a rating..."/>
	<input type="text" @bind="ReviewText" placeholder="Write a review..."/>
	<button @onclick="SubmitReview">Submit</button>
}

@code {
	public int? Rating { get; set; }
	public string ReviewText { get; set; }

	[Parameter]
	public string ProductID { get; set; }

	private ProductDetailsViewModel _product;

	protected override async Task OnInitializedAsync()
	{
		_product = await ProductDetailsService.GetProductDetailsViewModelAsync(int.Parse(ProductID));
	}

	private async void SubmitReview()
	{
		bool successful = await ProductDetailsService.SubmitReview(_product, ReviewText, Rating.Value);
		ReviewText = null;
		Rating = null;
		_product = await ProductDetailsService.GetProductDetailsViewModelAsync(int.Parse(ProductID));
	}
}

