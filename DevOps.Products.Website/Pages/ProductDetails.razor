@page "/products/{ProductID}"
@using AutoMapper
@using DevOps.Products.Website.Models.ViewModels
@using DevOps.Products.Website.Services.Interfaces.Facades
@using Microsoft.AspNetCore.Components
@using DevOps.Products.Website.Models.DTOs;
@using DevOps.Products.Website.Models.ViewModels.ProductDetails;
@using System.Security.Claims;

@inject IMapper _mapper;
@inject IProductFacadeService _productFacadeService;
@inject IReviewFacadeService _reviewFacadeService;
@inject ICustomerFacadeService _customerFacadeService;
@inject IOrderFacadeService _orderFacadeService;
@inject NavigationManager NavigationManager

@if (!_isInitialized)
{
	<p><em>Loading...</em></p>
}
else
{
	<h1>@_product.Name</h1>
	<table class="table">
		<thead>
			<tr>
				<th>Category</th>
				<th>Brand</th>
				<th>Description</th>
				<th>Price</th>
				<AuthorizeView>
					<Authorized>
						<th id="ProductHeaderQuantity">Stock</th>
					</Authorized>
				</AuthorizeView>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td id="ProductName">@_product.CategoryName</td>
				<td id="ProductBrand">@_product.BrandName</td>
				<td id="ProductDescription">@_product.Description</td>
				<td id="ProductPrice">£@_product.Price.ToString("f2")</td>
				@if (_user.IsInRole("Staff"))
				{
					<td id="ProductQuantity">@_product.Quantity</td>
				}
				else if (_user.IsInRole("Customer"))
				{
					@if (_product.Quantity > 0)
					{
						<td id="ProductQuantity">In Stock</td>
						@if (!string.IsNullOrWhiteSpace(_customer.DeliveryAddress) && !string.IsNullOrWhiteSpace(_customer.TelephoneNumber))
						{
							@if (_customer.CanPurchase)
							{
							    <td><button id="BuyNowButton" @onclick="@(e => SubmitOrder())">Buy Now</button></td>
							}
						}
						else
						{
							<td id="ValidationText">You need a valid delivery address and telephone number in order to place an order.</td>
						}
					}
					else
					{
						<td id="ProductQuantity">Out of Stock</td>
					}
				}
			</tr>
		</tbody>
	</table>
	<h2>Reviews:</h2>
	@if (!_reviews.Any())
	{
		<p><em>No Reviews yet!</em></p>
	}
	else
	{
		<table class="table">
			<thead>
				<tr>
					<th id="ReviewHeaderCustomerName">Customer</th>
					<th id="ReviewHeaderText">Text</th>
					<th id="ReviewHeaderRating">Rating</th>
				</tr>
			</thead>
			<tbody>
				@foreach (ReviewViewModel review in _reviews)
				{
					<tr id="@($"ReviewRow{review.ID}")">
						<td id="ReviewCustomerName">@review.CustomerUsername</td>
						<td id="ReviewText">@review.Text</td>
						<td id="ReviewRating">@review.Rating</td>
						@if (_user.IsInRole("Staff") || _user.Identity.Name == review.CustomerUsername)
						{
							<button id="ReviewDeleteButton" @onclick="@(e => DeleteReview(review.ID))">Delete</button>
						}
					</tr>
				}
			</tbody>
		</table>
	}

	<AuthorizeView Roles="Customer">
		<Authorized Context="Auth">
			@if (_isValidToReview)
			{
				<EditForm id="ReviewForm" Model="@_reviewForm" OnValidSubmit="@SubmitReview">
					<DataAnnotationsValidator />
					<ValidationSummary />

					<InputNumber id="ReviewFormRatingInput" @bind-Value="_reviewForm.Rating" placeholder="Add a rating..." />
					<InputText id="ReviewFormTextInput" @bind-Value="_reviewForm.Text" placeholder="Write a review..." />
					<button id="ReviewFormSubmitButton" type="submit">Submit</button>
				</EditForm>
			}
		</Authorized>
	</AuthorizeView>
}

@code {
	[CascadingParameter]
	private Task<AuthenticationState> _authenticationStateTask { get; set; }
	private ClaimsPrincipal _user;

	private ProductViewModel _product;
	private ICollection<ReviewViewModel> _reviews;
	private CustomerViewModel _customer;

	private bool _isValidToReview;

	private bool _isInitialized {get;set;}

	private ReviewViewModel _reviewForm = new ReviewViewModel();

	[Parameter]
	public string ProductID { get; set; }

	protected override async Task OnInitializedAsync()
	{
		int id = int.Parse(ProductID);

		_product = _mapper.Map<ProductViewModel>(await _productFacadeService.GetProduct(id));

		AuthenticationState authState = await _authenticationStateTask;
		_user = authState.User;

		if (_user.Identity.IsAuthenticated)
		{
			_customer = _mapper.Map<CustomerViewModel>(await _customerFacadeService.GetCustomer(_user.Identity.Name));
		}

		await RefreshReviews();

		_isInitialized = true;
	}

	private async void SubmitReview()
	{
		_reviewForm.ProductID = _product.ID;
		_reviewForm.CustomerUsername = _user.Identity.Name;

		ReviewDTO reviewDTO = _mapper.Map<ReviewDTO>(_reviewForm);

		bool isSuccessful = await _reviewFacadeService.CreateReview(reviewDTO);

		if (isSuccessful)
		{
			_reviewForm = new ReviewViewModel();

			//Do this to make sure the review IDs are correct.
			await RefreshReviews();

			this.StateHasChanged();
		}
	}

	private async void DeleteReview(int id)
	{
		bool isSuccessful = await _reviewFacadeService.DeleteReview(id);

		if (isSuccessful)
		{
			await RefreshReviews();

			this.StateHasChanged();
		}
	}

	private async Task RefreshReviews()
	{
		_isValidToReview = false;
		_reviews = _mapper.Map<ICollection<ReviewViewModel>>(await _reviewFacadeService.GetReviewCollection(_product.ID));

		//Checks if the user is valid to make a review
		if (!_reviews.Any(review => review.CustomerUsername == _user.Identity.Name))
		{
			if ((await _orderFacadeService.GetOrders(_user.Identity.Name, _product.ID)).Any())
			{
				_isValidToReview = true;
			}
		}
	}

	private async void SubmitOrder()
	{
		OrderDTO order = new OrderDTO
		{
			CustomerUsername = _user.Identity.Name,
			ProductID = _product.ID
		};

		if (await _orderFacadeService.CreateOrder(order))
		{
			NavigationManager.NavigateTo("/order");
		}
	}
}

